<?php
/**
 * Flatbase by NiceThemes.
 *
 * This file contains functions to manage the custom styles for the theme.
 *
 * @package   Flatbase
 * @author    NiceThemes <hello@nicethemes.com>
 * @license   GPL-2.0+
 * @link      http://nicethemes.com/theme/flatbase
 * @copyright 2016 NiceThemes
 * @since     1.0.0
 */
// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
	die;
}

if ( ! function_exists( 'nice_responsive_breakpoints' ) ) :
/**
 * Obtain responsive breakpoint sizes.
 *
 * These breakpoints should describe the minimum size for each kind of device.
 *
 * IMPORTANT: All values here should match the ones defined in
 * `sass/variables/_structure.scss`. Otherwise responsive layouts may break.
 *
 * @since 2.0
 *
 * @return array
 */
function nice_responsive_breakpoints() {
	return array(
		'desktop'   => 1024,
		'tablet'    => 768,
		'mobile-lg' => 425,
		'mobile-md' => 375,
		'mobile-sm' => 320,
	);
}
endif;

if ( ! function_exists( 'nice_custom_styling' ) ) :
add_action( 'nice_register_styles', 'nice_custom_styling', 20 );
/**
 * Add Custom Styling.
 *
 * @since 1.0.0
 */
function nice_custom_styling() {
	wp_add_inline_style( 'nice-styles', nice_inline_styles() );
}
endif;

if ( ! function_exists( 'nice_inline_styles' ) ) :
/**
 * Obtain inline styles as generated by following theme options.
 *
 * Previously was named `nice_custom_styling`
 *
 * @since 2.0
 */
function nice_inline_styles() {

	global $is_IE, $is_safari, $nice_options;

	// Obtain all breakpoints.
	$breakpoints = nice_responsive_breakpoints();

	$output = '';

	// working with options for the live customizer.
	if ( $nice_accent_color = nice_get_option( 'nice_accent_color' ) ) {

		$output .= '.entry blockquote { border-left-color:' . $nice_accent_color . '; }' . "\n";
		$output .= '.nice-infoboxes .item:hover a.read-more { border-bottom-color:' . $nice_accent_color . '; }' . "\n";
		$output .= 'a, .entry a:visited, .entry a:hover, .wp-pagenavi span.current, #extended-footer a:hover, .liked i, .nice-knowledgebase ul li:hover i, span.required { color: ' . $nice_accent_color . '; }' . "\n";

		$output .= '#navigation ul li a .bar, #navigation ul li a .bar:before, #navigation ul li a .bar:after, #navigation ul li a .bar, .nice-contact-form input[type="submit"]:hover, #commentform .button:hover, #respond input[type="submit"]:hover, .single .featured-image a, .post .featured-image a, .blog-masonry #posts-ajax-loader-button:hover, .nice-gallery .thumb a, #tabs .inside .tags a:hover { background-color: ' . $nice_accent_color . '; }' . "\n";
		$output .= '::selection { background: ' . $nice_accent_color . ' }' . "\n";
		$output .= '::-moz-selection { background: ' . $nice_accent_color . ' }' . "\n";

	}

	if ( $nice_header_background_color = nice_header_background_color() ) {
		$output .= '#header { background-color: ' . nice_theme_color_value( $nice_header_background_color ) . ' !important; }' . "\n";
	}

	// Apply background color for header.
	if ( $header_bg_image = nice_header_background_image() ) {
		$output .= '#header { background-image: url(' . $header_bg_image . '); }' . "\n";

		if ( $header_bg_repeat = nice_header_background_image_repeat() ) {
			$output .= '#header { background-repeat: ' . $header_bg_repeat . '; }' . "\n";
		}

		if ( $header_bg_position = nice_header_background_image_position() ) {
			$output .= '#header { background-position: ' . $header_bg_position . '; }' . "\n";
		}

		if ( $header_bg_size = nice_header_background_image_size() ) {
			$output .= '#header { background-size: ' . $header_bg_size . '; }' . "\n";
		}

		if ( $header_bg_attachment = nice_header_background_image_attachment() ) {
			$output .= '#header { background-attachment: ' . $header_bg_attachment . '; }' . "\n";
		}
	}

	$nice_livesearch_padding_top    = intval( nice_get_option( '_livesearch_padding_top', 70 ) );
	$nice_livesearch_padding_bottom = intval( nice_get_option( '_livesearch_padding_bottom', 90 ) );

	$output .= '@media all and (min-width: ' . $breakpoints['desktop'] . 'px) { #live-search { padding-top: ' . $nice_livesearch_padding_top . 'px } }' . "\n";
	$output .= '@media all and (min-width: ' . $breakpoints['desktop'] . 'px) { #live-search { padding-bottom: ' . $nice_livesearch_padding_bottom . 'px } }' . "\n";

	$nice_layout_type = nice_get_option( 'nice_layout_type' );
	if ( isset( $nice_layout_type ) && $nice_layout_type == 'boxed' ) {
		$output .= '#wrapper, #header { margin: 0 auto; max-width: 1180px; }' . "\n";
	}

	if ( $nice_background_image = nice_get_option( '_background_image' ) ) {
		$output .= 'body, .bg-image { background-image : url(' . $nice_background_image . '); }' . "\n";
	}

	if ( $nice_background_color = nice_get_option( '_background_color' ) ) {
		$output .= 'body, .bg-image { background-color : ' . nice_theme_color_value( $nice_background_color ) . '; }' . "\n";
	}

	if ( $nice_background_image_position = nice_get_option( '_background_image_position' ) ) {
		$output .= 'body, .bg-image { background-position : ' . $nice_background_image_position . '; }' . "\n";
	}

	;
	if ( $nice_background_image_repeat = nice_get_option( '_background_image_repeat' ) ) {
		$output .= 'body, .bg-image { background-repeat : ' . $nice_background_image_repeat . '; }' . "\n";
	}

	if ( $nice_logo_height = nice_get_option( '_logo_height' ) ) {
		$output .= '#header #top #logo #default-logo, #header #top #logo #retina-logo { height : ' . $nice_logo_height . 'px; }' . "\n";
	}

	if ( $nice_likes_color = nice_get_option( '_likes_color' ) ) {
		$output .= '.liked i { color : ' . nice_theme_color_value( $nice_likes_color ) . ' !important }' . "\n";
	}

	/**
	 * Light skin.
	 */

	if ( $light_skin_bg_color = nice_get_option( '_light_skin_background_color' ) ) {
		$output .= '.light #wrapper, #container .light { background-color: ' . nice_theme_color_value( $light_skin_bg_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_text_color = nice_get_option( '_light_skin_text_color' ) ) {
		$output .= '.light, .light #wrapper, .entry blockquote, .light .nice-knowledgebase ul li a { color: ' . nice_theme_color_value( $light_skin_text_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_link_color = nice_get_option( '_light_skin_link_color' ) ) {
		$output .= '.light #content a:not(.button), .light #container a, #container .light a { color: ' . nice_theme_color_value( $light_skin_link_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_heading_color = nice_get_option( '_light_skin_heading_color' ) ) {
		$output .= '.light #container h1, .light #container h2, .light #container h3, .light #container h4, .light #container h5, .light #container h6, .light .nice-knowledgebase h3 a, .light .nice-knowledgebase h3, .light .videos h2 { color: ' . nice_theme_color_value( $light_skin_heading_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_nav_text_color = nice_get_option( '_light_skin_nav_text_color' ) ) {
		$output .= '#header-inner #main-nav > .menu-item > a { color: ' . nice_theme_color_value( $light_skin_nav_text_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_subnav_background_color = nice_get_option( '_light_skin_subnav_background_color' ) ) {
		$output .= '.submenu-light #main-nav.nav li ul { background: ' . nice_theme_color_value( $light_skin_subnav_background_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_welcome_message_color = nice_get_option( '_light_skin_welcome_message_color' ) ) {
		$output .= '#live-search.light .welcome-message header { color: ' . nice_theme_color_value( $light_skin_welcome_message_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_welcome_message_extended_color = nice_get_option( '_light_skin_welcome_message_extended_color' ) ) {
		$output .= '#live-search.light .welcome-message p { color: ' . nice_theme_color_value( $light_skin_welcome_message_extended_color ) . ' !important; }' . "\n";
	}

	if ( $light_skin_footer_background_color = nice_get_option( '_light_skin_footer_background_color' ) ) {
		$output .= '.site-footer.light { background: ' . nice_theme_color_value( $light_skin_footer_background_color ) . ' !important; }' . "\n";
	}

	/**
	 * Dark skin.
	 */

	if ( $dark_skin_bg_color = nice_get_option( '_dark_skin_background_color' ) ) {
		$output .= '.dark #wrapper, #container .dark { background-color: ' . nice_theme_color_value( $dark_skin_bg_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_text_color = nice_get_option( '_dark_skin_text_color' ) ) {
		$output .= '.dark, .dark #wrapper, .entry blockquote { color: ' . nice_theme_color_value( $dark_skin_text_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_link_color = nice_get_option( '_dark_skin_link_color' ) ) {
		$output .= '.dark #content a:not(.button), .dark #container a, #container .dark a { color: ' . nice_theme_color_value( $dark_skin_link_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_heading_color = nice_get_option( '_dark_skin_heading_color' ) ) {
		$output .= '.dark #container h1, .dark #container h2, .dark #container h3, .dark #container h4, .dark #container h5, .dark #container h6 { color: ' . nice_theme_color_value( $dark_skin_heading_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_nav_text_color = nice_get_option( '_dark_skin_nav_text_color' ) ) {
		$output .= '#header-inner #main-nav > .menu-item > a { color: ' . nice_theme_color_value( $dark_skin_nav_text_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_subnav_text_color = nice_get_option( '_dark_skin_subnav_text_color' ) ) {
		$output .= '#main-nav > .menu-item > .sub-menu .menu-item a { color: ' . nice_theme_color_value( $dark_skin_nav_text_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_subnav_background_color = nice_get_option( '_dark_skin_subnav_background_color' ) ) {
		$output .= '.submenu-dark #main-nav.nav li ul { background: ' . nice_theme_color_value( $dark_skin_subnav_background_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_welcome_message_color = nice_get_option( '_dark_skin_welcome_message_color' ) ) {
		$output .= '#live-search.dark .welcome-message header { color: ' . nice_theme_color_value( $dark_skin_welcome_message_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_welcome_message_extended_color = nice_get_option( '_dark_skin_welcome_message_extended_color' ) ) {
		$output .= '#live-search.dark .welcome-message p { color: ' . nice_theme_color_value( $dark_skin_welcome_message_extended_color ) . ' !important; }' . "\n";
	}

	if ( $dark_skin_footer_background_color = nice_get_option( '_dark_skin_footer_background_color' ) ) {
		$output .= '.site-footer.dark { background: ' . nice_theme_color_value( $dark_skin_footer_background_color ) . ' !important; }' . "\n";
	}

	/**
	 * Navigation Highlight Color.
	 */

	if ( $menu_highlight_color = nice_get_option( '_menu_highlight_color' ) ) {
		$output .= '@media only all and (min-width: ' . $breakpoints['desktop'] . 'px) { ';
		$output .= '	#top #navigation .nav li:hover > a,';
		$output .= '	#top #navigation .nav li.current_page_item > a,';
		$output .= '	#top #navigation .nav li.current_page_parent > a,';
		$output .= '	#top #navigation .nav li.current-menu-ancestor > a,';
		$output .= '	#top #navigation .nav li.current-menu-item > a,';
		$output .= '	#top #navigation .nav li.sfHover { color: ' . nice_theme_color_value( $menu_highlight_color ) . ' !important; } } ';
	}

	/**
	 * Navigation Menu BarHighlight Color.
	 */

	if ( $menu_bar_highlight_color = nice_get_option( '_menu_bar_highlight_color' ) ) {
		$output .= '@media only all and (min-width: ' . $breakpoints['desktop'] . 'px) { ';
		$output .= '	#navigation ul li a .bar,';
		$output .= '	#navigation ul li a .bar:before,';
		$output .= '	#navigation ul li a .bar:after,';
		$output .= '	#navigation ul li a .bar { background-color: ' . nice_theme_color_value( $menu_bar_highlight_color ) . ' !important; } } ';
	}

	/**
	 * Page Loader
	 */
	$output .= '/* Page Loader. */' . "\n";
	if ( $nice_page_loader = nice_get_option( 'nice_page_loader' ) ) {
		if ( 'top_bar' === $nice_page_loader ) {
			if ( $nice_page_loader_color = nice_get_option( 'nice_page_loader_color' ) ) {
				$output .= '.pace .pace-progress { background:' . nice_get_option( $nice_page_loader_color ) . ' }' . "\n";
			} elseif ( nice_get_option_default( 'nice_accent_color' ) !== ( $accent_color = nice_get_option( 'nice_accent_color' ) ) ) {
				$output .= '.pace .pace-progress { background:' . $accent_color . ' }' . "\n";
			}
		} elseif ( 'full_page' === $nice_page_loader ) {
			if ( $nice_page_loader_background_color_id = nice_get_option( 'nice_page_loader_full_page_background_color' ) ) {
				$nice_page_loader_background_color = nice_theme_color_value( $nice_page_loader_background_color_id );
				$output .= 'body[data-page-loader="full-page"] .nice-page-loader-full { background-color: ' . esc_attr( $nice_page_loader_background_color ) . ' }' . "\n";
			}

			if ( $nice_page_loader_spinner_color_id = nice_get_option( '_page_loader_full_page_loader_color' ) ) {
				$nice_page_loader_spinner_color = nice_theme_color_value( $nice_page_loader_spinner_color_id );
				$output .= 'body[data-page-loader="full-page"] .nice-page-loader-full .path { stroke: ' . esc_attr( $nice_page_loader_spinner_color ) . ' }' . "\n";
				$output .= 'body[data-page-loader="full-page"] .nice-page-loader-full .loader { background-color: ' . esc_attr( $nice_page_loader_spinner_color ) . ' }' . "\n";
			}
		}
	} else {
		$output .= '.pace .pace-progress { background: transparent !important; }' . "\n";
	}

	/**
	 * @hook nice_inline_styles
	 *
	 * Hook here to add inline styles.
	 *
	 * @since 2.0
	 */
	$output = apply_filters( 'nice_inline_styles', $output );

	return $output;

}
endif;

if ( ! function_exists( 'nice_custom_styling_colors' ) ) :
add_filter( 'nice_inline_styles', 'nice_custom_styling_colors' );
/**
 * Add Custom Styling for the different colors.
 *
 * @since  1.0.0
 *
 * @param  string $inline_styles
 *
 * @return string
 */
function nice_custom_styling_colors( $inline_styles ) {
	// Initialize HTML output.
	$output = '';

	$nice_colors = nice_theme_colors();

	/**
	 * Default button color.
	 */
	$btn_color_id = nice_get_option( '_btn_color' );

	if ( $btn_color = nice_theme_color_value( $btn_color_id ) ) {
		$btn_body_class = 'body[data-btn-color="' . str_replace( '_', '-', $btn_color_id ) . '"]';

		$output .= '/* Default button color. */' . "\n";
		$output .= $btn_body_class . ' .btn:not(.btn-outline):not(.btn-cart), ';
		$output .= $btn_body_class . ' .button:not(.btn-outline), ';
		$output .= $btn_body_class . ' input[type="submit"]:not(.btn-outline), ' ;
		$output .= $btn_body_class . ' input[type="button"]:not(.btn-outline), ' ;
		$output .= $btn_body_class . ' .cta-button { background-color: ' . $btn_color . '; border-color: ' . $btn_color . '; }' . "\n";

		$output .= $btn_body_class . ' .btn-default.btn-outline:not(.btn-cart), ';
		$output .= $btn_body_class . ' .btn-outline.button:not(.btn-cart), ';
		$output .= $btn_body_class . ' input.btn-outline[type="submit"], ';
		$output .= $btn_body_class . ' input.btn-outline[type="button"] { color: ' . $btn_color . ' !important; border-color: ' . $btn_color . ' !important; }' . "\n";

		$output .= $btn_body_class . ' .btn-default:hover:not(.btn-outline):not(.btn-disable-hover):not(.btn-cart), ';
		$output .= $btn_body_class . ' .button:hover:not(.btn-outline):not(.btn-disable-hover):not(.btn-cart), ';
		$output .= $btn_body_class . ' input[type="submit"]:hover:not(.btn-outline):not(.btn-disable-hover), ';
		$output .= $btn_body_class . ' input[type="button"]:hover:not(.btn-outline):not(.btn-disable-hover), ';
		$output .= $btn_body_class . ' .cta-button { background-color: ' . nice_color_darken( $btn_color, .05 ). ' !important; border-color: ' . nice_color_darken( $btn_color, .05 ). ' !important; }' . "\n";

		$output .= $btn_body_class . ' .btn-default.btn-outline:hover:not(.btn-disable-hover):not(.btn-cart), ';
		$output .= $btn_body_class . ' .btn-outline.button:hover:not(.btn-disable-hover):not(.btn-cart), ';
		$output .= $btn_body_class . ' input.btn-outline[type="submit"]:hover:not(.btn-disable-hover), ';
		$output .= $btn_body_class . ' input.btn-outline[type="button"]:hover:not(.btn-disable-hover), ';
		$output .= $btn_body_class . ' .cta-button { border-color: ' . $btn_color . ' !important; background-color: ' . $btn_color . ' !important; }' . "\n";
	}

	foreach ( $nice_colors as $color ) {
		$color_hex        = $color['value'];
		$color_css_id     = $color['css_id'];
		$color_rgba       = ( false === strpos( $color_hex, 'rgba', 0 ) ) ? nice_color_hex2rgba( $color_hex, '0.25' ) : $color_hex;
		$btn_css_class    = '.' . nice_theme_color_button_class( $color_css_id );
		$txt_css_class    = '.' . nice_theme_color_text_class( $color_css_id );
		$bg_css_class     = '.' . nice_theme_color_background_class( $color_css_id );
		$border_css_class = '.' . nice_theme_color_border_class( $color_css_id );

		$btn_color_attr = 'color: #fff !important;';
		$btn_hover_color_attr = 'color: #fff !important;';
		// Prevent having white text on white button.
		if ( '.btn-white-color' === $btn_css_class ) {
			$btn_color_attr = '';
			$btn_hover_color_attr = '';
		}

		$output .= '/* ' . $color['name'] . '. */' . "\n";
		$output .= $btn_css_class . ', ' . $btn_css_class . '.btn-outline:hover, body[data-btn-color] [class]' . $btn_css_class . ':not(.btn-outline), body[data-btn-color] [class]' . $btn_css_class . '.btn-outline:hover, body[data-btn-color] input[type]' . $btn_css_class . ', body[data-btn-color] input[type]' . $btn_css_class . '.btn-outline:hover { ' . $btn_color_attr . ' background: ' . $color_hex . ' !important; border-color: ' . $color_hex . ' !important; }' . "\n";
		$output .= $btn_css_class . '.btn-outline, body[data-btn-color] [class]' . $btn_css_class . '.btn-outline, body[data-btn-color] input[type]' . $btn_css_class . '.btn-outline  { color: ' . $color_hex . ' !important; border-color: ' . $color_hex . ' !important; background: transparent !important; }' . "\n";
		$output .= $btn_css_class . ':not(.btn-outline):not(.btn-disable-hover):hover, body[data-btn-color] [class]' . $btn_css_class . ':not(.btn-outline):not(.btn-disable-hover):hover, body[data-btn-color] input[type]' . $btn_css_class . ':not(.btn-outline):not(.btn-disable-hover):hover { ' . $btn_hover_color_attr . ' background-color: ' . nice_color_darken( $color_hex, .05 ) . ' !important; border-color: ' . nice_color_darken( $color_hex, .05 ) . ' !important; }' . "\n";
		$output .= $btn_css_class . '.btn-outline:not(.btn-disable-hover):hover, body[data-btn-color] [class]' . $btn_css_class . '.btn-outline:not(.btn-disable-hover):hover, body[data-btn-color] input[type]' . $btn_css_class . '.btn-outline:not(.btn-disable-hover):hover { background-color: ' . $color_hex . ' !important; border-color: ' . $color_hex . ' !important; }' . "\n";
		$output .= $txt_css_class . ' { color: ' . $color_hex . ' !important; }' . "\n";
		$output .= $bg_css_class . ' { background-color: ' . $color_hex . ' !important; }' . "\n";
		$output .= $bg_css_class . '.bottom_gradient { background: linear-gradient(' . $color_rgba . ', ' . $color_hex . ') !important; }' . "\n";
		$output .= $bg_css_class . '.top_gradient { background: linear-gradient(' . $color_hex . ', ' . $color_rgba . ' ) !important; }' . "\n";
		$output .= $border_css_class . ' { border-color: ' . $color_hex . ' !important; }' . "\n";
	}

	if ( ! empty( $output ) ) {
		$inline_styles .= "\n" . $output;
	}

	return $inline_styles;
}
endif;

if ( ! function_exists( 'nice_tag_cloud_remove_inline_styles' ) ) :
add_filter( 'wp_tag_cloud', 'nice_tag_cloud_remove_inline_styles' );
/**
 * Remove tag cloud inline styles.
 *
 * @param  string $tags
 *
 * @return string
 */
function nice_tag_cloud_remove_inline_styles( $tags ) {
	return preg_replace( "/style=\'[^\']*\'/", '', $tags );
}
endif;
